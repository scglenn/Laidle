{"version":3,"file":"numeric-quantity.esm.js","sources":["../src/index.ts"],"sourcesContent":["enum VulgarFraction {\n  '¼' = '1/4',\n  '½' = '1/2',\n  '¾' = '3/4',\n  '⅐' = '1/7',\n  '⅑' = '1/9',\n  '⅒' = '1/10',\n  '⅓' = '1/3',\n  '⅔' = '2/3',\n  '⅕' = '1/5',\n  '⅖' = '2/5',\n  '⅗' = '3/5',\n  '⅘' = '4/5',\n  '⅙' = '1/6',\n  '⅚' = '5/6',\n  '⅛' = '1/8',\n  '⅜' = '3/8',\n  '⅝' = '5/8',\n  '⅞' = '7/8',\n}\n\n/**\n * Converts a string to a number.  The string can include mixed numbers\n * or vulgar fractions.\n */\nfunction numericQuantity(qty: string) {\n  const badResult = NaN;\n  let finalResult = badResult;\n\n  // Resolve any unicode vulgar fractions\n  const vulgarFractionsRegex = /(¼|½|¾|⅐|⅑|⅒|⅓|⅔|⅕|⅖|⅗|⅘|⅙|⅚|⅛|⅜|⅝|⅞)/;\n\n  const sQty = `${qty}`\n    .replace(\n      vulgarFractionsRegex,\n      (_m, vf: keyof typeof VulgarFraction) => ` ${VulgarFraction[vf]}`\n    )\n    .trim();\n\n  /**\n   *                    Regex captures\n   *\n   *  +=====+====================+========================+\n   *  |  #  |    Description     |        Example         |\n   *  +=====+====================+========================+\n   *  |  0  |  entire string     |  \"2 2/3\" from \"2 2/3\"  |\n   *  +-----+--------------------+------------------------+\n   *  |  1  |  the dash          |  \"-\" from \"-2 2/3\"     |\n   *  +-----+--------------------+------------------------+\n   *  |  2  |  the whole number  |  \"2\" from \"2 2/3\"      |\n   *  |     |  - OR -            |                        |\n   *  |     |  the numerator     |  \"2\" from \"2/3\"        |\n   *  +-----+--------------------+------------------------+\n   *  |  3  |  entire fraction   |  \"2/3\" from \"2 2/3\"    |\n   *  |     |  - OR -            |                        |\n   *  |     |  decimal portion   |  \".66\" from \"2.66\"     |\n   *  |     |  - OR -            |                        |\n   *  |     |  denominator       |  \"/3\" from \"2/3\"       |\n   *  +=====+====================+========================+\n   *\n   *  re.exec(\"1\")       // [ \"1\",     \"1\", null,   null ]\n   *  re.exec(\"1.23\")    // [ \"1.23\",  \"1\", \".23\",  null ]\n   *  re.exec(\"1 2/3\")   // [ \"1 2/3\", \"1\", \" 2/3\", \" 2\" ]\n   *  re.exec(\"2/3\")     // [ \"2/3\",   \"2\", \"/3\",   null ]\n   *  re.exec(\"2 / 3\")   // [ \"2 / 3\", \"2\", \"/ 3\",  null ]\n   */\n  const re = /^(-)?\\s*(\\d*)(\\.\\d+|(\\s+\\d*\\s*)?\\s*\\/\\s*\\d+)?$/;\n\n  const ar = re.exec(sQty);\n\n  // If the regex fails, give up\n  if (!ar) {\n    return badResult;\n  }\n\n  // Store the capture groups so we don't have to access the array\n  // elements over and over\n  const [, dash, numberGroup1, numberGroup2] = ar;\n\n  // The regex can pass and still capture nothing in the relevant groups,\n  // which means it failed for our purposes\n  if (!numberGroup1 && !numberGroup2) {\n    return badResult;\n  }\n\n  // Numerify capture group 1\n  if (!numberGroup1 && numberGroup2 && numberGroup2.search(/^\\./) !== -1) {\n    finalResult = 0;\n  } else {\n    finalResult = parseInt(numberGroup1);\n  }\n\n  if (isNaN(finalResult)) {\n    return badResult;\n  }\n\n  // If capture group 2 is null, then we're dealing with an integer\n  // and there is nothing left to process\n  if (!numberGroup2) {\n    return finalResult * (dash === '-' ? -1 : 1);\n  }\n\n  if (numberGroup2.search(/^\\./) !== -1) {\n    // If first char is \".\" it's a decimal so just trim to 3 decimal places\n    const numerator = parseFloat(numberGroup2);\n    finalResult += Math.round(numerator * 1000) / 1000;\n  } else if (numberGroup2.search(/^\\s*\\//) !== -1) {\n    // If the first non-space char is \"/\" it's a pure fraction (e.g. \"1/2\")\n    const numerator = parseInt(numberGroup1);\n    const denominator = parseInt(numberGroup2.replace('/', ''));\n    finalResult = Math.round((numerator * 1000) / denominator) / 1000;\n  } else {\n    // Otherwise it's a mixed fraction (e.g. \"1 2/3\")\n    const fractionArray = numberGroup2.split('/');\n    const [numerator, denominator] = fractionArray.map(v => parseInt(v));\n    finalResult += Math.round((numerator * 1000) / denominator) / 1000;\n  }\n\n  return finalResult * (dash === '-' ? -1 : 1);\n}\n\nexport default numericQuantity;\n"],"names":["VulgarFraction","numericQuantity","qty","badResult","NaN","finalResult","vulgarFractionsRegex","sQty","replace","_m","vf","trim","re","ar","exec","dash","numberGroup1","numberGroup2","search","parseInt","isNaN","numerator","parseFloat","Math","round","denominator","fractionArray","split","map","v"],"mappings":"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"}